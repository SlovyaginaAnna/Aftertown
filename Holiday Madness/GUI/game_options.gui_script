local signs_table = require "scripts.signs"
local currency_table = require "scripts.currency"
local color_change_time = 2
local shop_open = false
local index_of_open_panel = 0
local half_tile = 12
local slider_len = 0
local general_sound_coef = 1

function init(self)
	signs_table.init()
	gui.set_enabled(gui.get_node("sounds"), false)
	gui.set_enabled(gui.get_node("menu"), false)
	gui.set_enabled(gui.get_node("signs_panel"), false)
	gui.set_enabled(gui.get_node("clock"), false)
	sound.play("/music#sound")
	msg.post(".", "acquire_input_focus")
	gui.animate(gui.get_node("box"), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_INOUTQUAD, 60, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	for i = 0, 8 do
		gui.animate(gui.get_node("star"..i), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0), gui.EASING_INOUTQUAD, 60, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	end
	change_money_amount(0)
	return_alpha()
	slider_len = gui.get_size(gui.get_node("music_sound")).x
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash('signs_panel') then
		shop_open = false
		return_alpha()
		open_sign_panel(message['index'], message['pos'])
		index_of_open_panel = message['index']
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if gui.pick_node(gui.get_node("music_sound"), action.x, action.y) then
			change_volume(action, 'slider1')
		elseif gui.pick_node(gui.get_node("game_sounds"), action.x, action.y) then
			change_volume(action, 'slider2')
		elseif gui.pick_node(gui.get_node("general_sound"), action.x, action.y) then
			change_volume(action, 'slider3')
		end
		if action.pressed then
			if gui.pick_node(gui.get_node("start"), action.x, action.y) then
				on_start()
			elseif gui.pick_node(gui.get_node("cross"), action.x, action.y) then
				sound.play("/sound#sound")
				gui.set_enabled(gui.get_node("sounds"), false)
			elseif gui.pick_node(gui.get_node("options"), action.x, action.y) or gui.pick_node(gui.get_node("wrench"), action.x, action.y) then
				sound.play("/sound#sound")
				gui.set_enabled(gui.get_node("sounds"), true)
			elseif gui.pick_node(gui.get_node("cart"), action.x, action.y) then
				sound.play("/sound#sound")
				open_cart(action)
			elseif gui.pick_node(gui.get_node("exit"), action.x, action.y) then
				sound.play("/sound#sound")
				close_sighns_panel()
			else
				local sign =  if_click_on_sign(action)
				if sign ~= nil then
					sound.play("/sound#sound")
					if shop_open then
						buy_sign(sign)
					elseif gui.get_color(gui.get_node(sign)).w ~= 1 then
						set_sign(sign)
					else
						del_sign(sign)
					end
				end
			end
		end
	end
end

function change_volume(action, slider)
	pos = slider_position(action, slider)
	gui.set_position(gui.get_node(slider), pos)
	if slider == 'slider3' then
		general_sound_coef = (pos.x + slider_len / 2) / slider_len
		number = gui.get_position(gui.get_node('slider1')).x
		sound.set_gain("/music#sound", (number + slider_len / 2) / slider_len * general_sound_coef)
		number = gui.get_position(gui.get_node('slider2')).x
		sound.set_gain("/sound#sound", (number + slider_len / 2) / slider_len * general_sound_coef)
	else
		if slider == 'slider1' then
			sound.set_gain("/music#sound", (pos.x + slider_len / 2) / slider_len * general_sound_coef)
		else
			sound.set_gain("/sound#sound", (pos.x + slider_len / 2) / slider_len * general_sound_coef)
		end
	end
end

function on_start()
	sound.play("/sound#sound")
	gui.set_enabled(gui.get_node("box"), false)
	gui.set_enabled(gui.get_node("menu"), true)
	gui.set_enabled(gui.get_node("clock"), true)
	msg.post("/go#main", "start")
	start_day()
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

change_time = function()
	time_before_end = time_before_end - 1
	local time_string = ""
	if (time_before_end - time_before_end % 60) / 60 < 10 then
		time_string = time_string .. "0"
	end
	time_string = time_string .. tostring((time_before_end - time_before_end % 60) / 60) .. ":"
	if time_before_end % 60 < 10 then
		time_string = time_string .. "0"
	end
	time_string = time_string .. tostring(time_before_end % 60)
	gui.set_text(time_text, time_string)
end

function slider_position(action, slider)
	local sound_menu = gui.get_node("sounds")
	local line = gui.get_node(slider)
	x = action.x - gui.get_position(sound_menu).x
	return vmath.vector3(x, 0, 0)
end

function open_cart(action)
	set_price()
	shop_open = true
	panel = gui.get_node("signs_panel")
	gui.set_enabled(panel, true)
	change_alpha(panel, 1)
	gui.set_position(panel, vmath.vector3(217, 887, 1))
	set_alpha()
end

function close_sighns_panel()
	shop_open = false
	return_alpha()
	panel = gui.get_node("signs_panel")
	gui.set_enabled(panel, false)
end

function set_alpha()
	cash = currency_table.cash()
	local available_signs = signs_table.available(cash)
	for i = 1, #available_signs do
		node = gui.get_node(available_signs[i])
		change_alpha(node, 1)
	end
end

function return_alpha()
	local signs = signs_table.allSigns()
	for i = 1, #signs do
		node = gui.get_node(signs[i])
		change_alpha(node, 0.4)
	end
end

function change_money_amount(price)
	currency_table.change_money(price)
	local money = gui.get_node('money_amount')
	local amount = currency_table.cash()
	gui.set_text(money, amount)
end

function if_click_on_sign(action)
	local signs = signs_table.allSigns()
	for i = 1, #signs do
		node = gui.get_node(signs[i])
		if gui.pick_node(node, action.x, action.y) then
			return signs[i]
		end
	end
	return nil
end

function buy_sign(type)
	price = signs_table.price_by_type(type)
	if currency_table.cash() >= price then
		signs_table.buySign(type)
		change_money_amount(-price)
		return_alpha()
		set_alpha()
	end
end

function set_price()
	local signs = signs_table.allSigns()
	local price = signs_table.get_price_table()
	for i = 1, #signs do
		node = gui.get_node(signs[i]..'_text')
		gui.set_text(node, price[i])
	end
end

function open_sign_panel(index, pos)
	quantity = signs_table.get_sign_by_index(index)
	for i = 1, #quantity[3] do
		print(quantity[3][i])
		node = gui.get_node(quantity[3][i])
		change_alpha(node, 1)
	end
	change_quantity_labels()
	panel = gui.get_node('signs_panel')
	gui.set_position(panel, pos)
	gui.set_enabled(panel, true)
end

function change_alpha(node, alpha)
	color = gui.get_color(node)
	color.w = alpha
	gui.set_color(node, color)
end

-- TO DO create sign go
function set_sign(type)
	local sign = signs_table.get_sign_by_index(index_of_open_panel)
	local node = gui.get_node(type)
	if type ~= 'traffic_light' and sign[1] < 4 then
		if signs_table.set_sign(type) then
			change_alpha(node, 1)
			change_quantity_labels()
			sign[1] = sign[1] + 1
			table.insert(sign[3], type)
			local url = factory.create("/road_signs_factory#factory", count_pos(index_of_open_panel, sign[1]))
			table.insert(sign[4], url)
			msg.post(url, 'change_sprite', {type = type})
			msg.post('/navigator', 'set_sign', {url = url, type = type, pos = signs_table.pos(index_of_open_panel)})
		end
	elseif type == 'traffic_light' and not sign[2] then
		sign[2] = true
		change_alpha(node, 1)
		local url = factory.create("/traffic_light_factory#factory", signs_table.pos(index_of_open_panel))
		msg.post('/navigator', 'set_sign', {url = url, type = type, pos = signs_table.pos(index_of_open_panel)})
	end
end

function del_sign(type)
	local sign = signs_table.get_sign_by_index(index_of_open_panel)
	local node = gui.get_node(type)
	price = signs_table.price_by_type(type)
	sign[1] = sign[1] - 1
	signs_table.change_quantity(type)
	change_quantity_labels()
	change_alpha(node, 0.4)
	for i = 1, #sign[3] do
		if sign[3][i] == type then
			msg.post(sign[4][i], 'disable')
			table.remove(sign[4], i)
			table.remove(sign[3], i)
			break
		end
	end
	for i = 1, #sign[4] do
		msg.post(sign[4][i], 'change_pos', {pos = count_pos(index_of_open_panel, i)})
	end
	msg.post('/navigator', 'del_sign', {type = type, pos = signs_table.pos(index_of_open_panel)})
end

function change_quantity_labels()
	local reserve = signs_table.get_quantity()
	for i = 1, #reserve do
		node = gui.get_node(reserve[i][1]..'_text')
		gui.set_text(node, reserve[i][2]..'/'..reserve[i][3])
	end
end

function count_pos(index, num)
	print(num)
	pos = signs_table.pos(index)
	if num > 2 then
		pos.y = pos.y - half_tile
	else
		pos.y = pos.y + half_tile
	end
	if num == 1 or num == 3 then
		pos.x = pos.x - half_tile
	else
		pos.x = pos.x + half_tile
	end
	return pos
end

function animate_night()
	gui.animate(gui.get_node("night"), gui.PROP_COLOR, vmath.vector4(0, 0, 0, 0.7), gui.EASING_INOUTQUAD, 20, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
end

function start_day()
	change_alpha(gui.get_node('night'), 0)
	gui.animate(gui.get_node('arrow'), gui.PROP_ROTATION, vmath.vector3(0, 0, 0), gui.EASING_INOUTQUAD, 15)
end