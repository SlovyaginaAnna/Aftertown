local s = require("scripts.shop")
local c = require("scripts.coordinates")

-- Car, which drives from one home to another.
-- Car chooses route with navigator, that calculates the fastest route.

local navigator = nil
go.property("Color", 0)
go.property("CarsInFront", 0)

function turn_left(self)
	self.direction = "left"
	local color_string = "green"
	if self.Color == 0 then
		color_string = "red"
	end
	msg.post("#sprite", "play_animation", {id = hash(color_string .. "_car_left")})
	msg.post("#light", "play_animation", {id = hash("light_left")})
end

function turn_right(self)
	self.direction = "right"
	local color_string = "green"
	if self.Color == 0 then
		color_string = "red"
	end
	msg.post("#sprite", "play_animation", {id = hash(color_string .. "_car_right")})
	msg.post("#light", "play_animation", {id = hash("light_right")})
end

function turn_up(self)
	self.direction = "up"
	local color_string = "green"
	if self.Color == 0 then
		color_string = "red"
	end
	msg.post("#sprite", "play_animation", {id = hash(color_string .. "_car_up")})
	msg.post("#light", "play_animation", {id = hash("light_up")})
end

function turn_down(self)
	self.direction = "down"
	local color_string = "green"
	if self.Color == 0 then
		color_string = "red"
	end
	msg.post("#sprite", "play_animation", {id = hash(color_string .. "_car_down")})
	msg.post("#light", "play_animation", {id = hash("light_down")})
end

function turn(self, road)
	if road.to.position.x > road.from.position.x then
		turn_right(self)
	elseif road.to.position.x < road.from.position.x then
		turn_left(self)
	elseif road.to.position.y < road.from.position.y then
		turn_down(self)
	else
		turn_up(self)
	end
end

-- How much time will a car spend on a given road.
function time_on_road_left(self, road)
	local delta = vmath.length(go.get_position(".") - road.to.position)
	local full_path = vmath.length( road.to.position - road.from.position)
	local done = delta / full_path
	return done * road.length * math.max(math.pow(self.CarsInFront + 1, 2) / road.width, 1) / 50
end

-- Drive on the given road.
function drive(self, road, from_intersection, to_intersection)
	turn(self, road)
	local position = vmath.vector3(road.to.position.x, road.to.position.y, 0.65)
	local direction = road.to.position - road.from.position
	local stop_line = road.from.position + (direction * 40 / vmath.length(direction))
	time = time_on_road_left(self, road) * 40 / vmath.length(direction)
	stop_line = vmath.vector3(stop_line.x, stop_line.y, 0.65)
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, stop_line, go.EASING_LINEAR, time, 0, function() continue_driving(self, road, from_intersection, to_intersection) end)
end

function continue_driving(self, road, from_intersection, to_intersection)
	msg.post(navigator, "road_can_be_entered", {from = road.from, to = road.to})
	local position = vmath.vector3(road.to.position.x, road.to.position.y, 0.65)
	local direction = road.to.position - road.from.position
	local stop_line = road.to.position - (direction * 40 / vmath.length(direction))
	stop_line = vmath.vector3(stop_line.x, stop_line.y, 0.65)
	time = time_on_road_left(self, road)
	if to_intersection == false then
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, time, 0, function() road_is_finished(self, road) end)
	else
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, stop_line, go.EASING_LINEAR, time, 0, function() msg.post(navigator, "intersection", {road = road}) end)
	end
end

function enter_intersection(self, road)
	local position = vmath.vector3(road.to.position.x, road.to.position.y, 0.65)
	time = time_on_road_left(self, road)
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, time, 0, function() road_is_finished(self, road) end)
end

-- Tell navigator that road is finished and ask where next.
function road_is_finished(self, road)
	msg.post(navigator, "road_is_finished", { from = road.from.number, to = road.to.number })
	where_next(self, road.to.number)
end

-- Ask navigator where to go next.
function where_next(self, home)
	msg.post(navigator, "where_next", { from = home, to = self.to, color = self.Color, direction = self.direction })
end

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	self.direction = "left"
	if self.Color == 0 then
		msg.post("#sprite", "play_animation", {id = hash("red_car_left")})
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start") then
		self.from = message.from
		self.to = message.to
		navigator = message.navigator
		where_next(self, message.from)
	elseif message_id == hash("go_to") then
		drive(self, message.road, message.from_intersection, message.to_intersection)
	elseif message_id == hash("wait") then
		timer.delay(math.random(0.5, 1.5), false, function() where_next(self, c.index(go.get_position("."))) end)
	elseif message_id == hash("wait_on_intersection") then
		timer.delay(math.random(0.5, 1.5), false, function() msg.post(navigator, "intersection", {road = message.road}) end)
	elseif message_id == hash("enter_intersection") then
		enter_intersection(self, message.road)
	elseif message_id == hash("done") then
		coords = c.colAndRow(go.get_position("."))
		msg.post(c.coord[coords[1]][coords[2]].handle, "visit")
	elseif message_id == hash("accept") then
		go.delete(".")
	elseif message_id == hash("deny") then
		where_next(self, c.index(go.get_position(".")))
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
