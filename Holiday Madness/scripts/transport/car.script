local s = require("scripts.shop")
local c = require("scripts.coordinates")

-- Car, which drives from one home to another.
-- Car chooses route with navigator, that calculates the fastest route.

local navigator = nil
go.property("Color", 0)
go.property("CarsInFront", 0)

-- How much time will a car spend on a given road.
function time_on_road_left(self, road)
	local delta = vmath.length(go.get_position(".") - road.to.position)
	local full_path = vmath.length( road.to.position - road.from.position)
	local done = delta / full_path
	return done * road.length * math.max(math.pow(self.CarsInFront + 1, 2) / road.width, 1) / 50
end

-- Drive on the given road.
function drive(self, road)
	local position = vmath.vector3(road.to.position.x, road.to.position.y, 0.65)
	local direction = road.to.position - road.from.position
	local rotation = vmath.quat_rotation_z(-math.pi / 2 + math.atan2(direction.y, direction.x))
	go.set_rotation(rotation, ".")
	time = time_on_road_left(self, road)
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, time, 0, function() road_is_finished(self, road) end)
end

-- Tell navigator that road is finished and ask where next.
function road_is_finished(self, road)
	msg.post(navigator, "road_is_finished", { from = road.from.number, to = road.to.number })
	where_next(self, road.to.number)
end

-- Ask navigator where to go next.
function where_next(self, home)
	msg.post(navigator, "where_next", { from = home, to = self.to, color = self.Color })
end

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	if self.Color == 0 then
		msg.post("#sprite", "play_animation", {id = hash("CAR_green")})
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start") then
		self.from = message.from
		self.to = message.to
		navigator = message.navigator
		where_next(self, message.from)
	elseif message_id == hash("go_to") then
		drive(self, message.road)
	elseif message_id == hash("wait") then
		timer.delay(1, false, function() where_next(self, c.index(go.get_position("."))) end)
	elseif message_id == hash("done") then
		coords = c.colAndRow(go.get_position("."))
		msg.post(c.coord[coords[1]][coords[2]].handle, "visit")
	elseif message_id == hash("accept") then
		go.delete(".")
	elseif message_id == hash("deny") then
		where_next(self, c.index(go.get_position(".")))
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
