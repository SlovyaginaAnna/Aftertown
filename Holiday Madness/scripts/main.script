local c = require "scripts.coordinates"
local currency = require "scripts.currency"
local h = require "scripts.home"
local s = require "scripts.shop"
local sign_table = require "scripts.signs"
local r = require "scripts.roads"
delete_roads = false
game_time = 180

-- Position of last touch.
local last_touch = nil

function build_road(self, position)
	if not c.isBlocked(c.colAndRow(position)) then
		if last_touch == nil then
			last_touch = c.colAndRowToPos(c.colAndRow(position))
			go.set_position(vmath.vector3(last_touch.x, last_touch.y, 1), "/selected_cell")
		else
			msg.post("/navigator", "add_road", {from = last_touch, to = position})
			go.set_position(vmath.vector3(last_touch.x, last_touch.y, 100), "/selected_cell")
			print("table.insert(R.roads, {start={x=" .. last_touch.x .. ", y=" .. last_touch.y .. ",z=0}, finish={x=".. position.x .. ", y=" .. position.y .. ",z=0}})")
			last_touch = nil
		end
	end
end

function delete_road(self, position)
	if last_touch == nil then
		last_touch = c.colAndRowToPos(c.colAndRow(position))
		go.set_position(vmath.vector3(last_touch.x, last_touch.y, 1), "/selected_cell")
	else
		msg.post("/navigator", "delete_road", {from = last_touch, to = position})
		go.set_position(vmath.vector3(last_touch.x, last_touch.y, 100), "/selected_cell")
		last_touch = nil
	end
end

function draw_road(self, road_struct)
	-- TODO - remove.
end

function build_roads(self)
	r.initRoads()
	for _, road in ipairs(r.roads) do
		msg.post("/navigator", "add_road", {from = road.start, to = road.finish})
	end
end

function add_cells_to_navigator(self)
	local cells_numbers = {190, 186, 243, 240, 297, 354, 183, 126, 237, 9, 1, 191, 197, 64, 267,
							271, 233, 237}
	for e, cell in pairs(cells_numbers) do
		msg.post("/navigator", "add_cell", {cell = cell})
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	math.randomseed(os.time())
	c.initCoord()
	s.initShops()
	h.initHomes()
	-- Init navigator.
	build_roads(self)
end

<<<<<<< HEAD
=======
function update(self, dt)
	if currency.cash() < 0 then
		end_game()
	end
end

>>>>>>> end_game
function on_message(self, message_id, message, sender)
	if message_id == hash("add_road") then
		draw_road(self, message.road)
	elseif message_id == hash("delete_button") then
		delete_roads = not delete_roads
	elseif message_id == hash("start") then
		start_game()
<<<<<<< HEAD
=======
<<<<<<< HEAD
	elseif message_id == hash('place_sign') then
=======
>>>>>>> 9b1aa875237740fc18775ad84693a80273247710
>>>>>>> end_game
	elseif message_id == hash('end') then
		end_game()
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if false then
			-- Debug prints.
			local x = action.x + go.get_position("/camera#camera").x
			local y = action.y + go.get_position("/camera#camera").y
			print('{x=' .. string.format("%.2f", x) .. ', y=' .. string.format("%.2f", y) .. ', z=0}')
			print(c.index(vmath.vector3(x, y, 0)))
			print('')
		else
			local tile_index = sign_table.tile_index(action)
			if tile_index ~= 0 then
				msg.post('/GUI#game_options', 'signs_panel', {index = tile_index, pos = vmath.vector3(action.x, action.y, 1)})
			end
		end
	end
end

end_game = function()
	h.clearCars()
	msg.post("/GUI#game_options", "end")
end
