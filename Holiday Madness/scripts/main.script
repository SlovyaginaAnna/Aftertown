local c = require "scripts.coordinates"
local h = require "scripts.home"
local s = require "scripts.shop"
local sign_table = require "scripts.signs"
local r = require "scripts.roads"
delete_roads = false
game_time = 180

-- Position of last touch.
local last_touch = nil

function build_road(self, position)
	if not c.isBlocked(c.colAndRow(position)) then
		if last_touch == nil then
			last_touch = c.colAndRowToPos(c.colAndRow(position))
			go.set_position(vmath.vector3(last_touch.x, last_touch.y, 1), "/selected_cell")
		else
			msg.post("/navigator", "add_road", {from = last_touch, to = position})
			go.set_position(vmath.vector3(last_touch.x, last_touch.y, 100), "/selected_cell")
			print("table.insert(R.roads, {start={x=" .. last_touch.x .. ", y=" .. last_touch.y .. ",z=0}, finish={x=".. position.x .. ", y=" .. position.y .. ",z=0}})")
			last_touch = nil
		end
	end
end

function delete_road(self, position)
	if last_touch == nil then
		last_touch = c.colAndRowToPos(c.colAndRow(position))
		go.set_position(vmath.vector3(last_touch.x, last_touch.y, 1), "/selected_cell")
	else
		msg.post("/navigator", "delete_road", {from = last_touch, to = position})
		go.set_position(vmath.vector3(last_touch.x, last_touch.y, 100), "/selected_cell")
		last_touch = nil
	end
end

function draw_road(self, road_struct)
	local start = road_struct.from.position
	local finish = road_struct.to.position

	local road = factory.create("/roads#factory", start)
	go.set(road, "scale.x", vmath.length(finish - start)/1080)
	go.set(road, "scale.y", road_struct.width/100)

	local direction = (finish - start) / 2
	local rotation = vmath.quat_rotation_z(math.atan2(direction.y, direction.x))
	go.set_rotation(rotation, road)
	local position = vmath.vector3((start + direction).x, (start + direction).y, 0.6)
	go.set_position(position, road)
	msg.post("/navigator", "add_road_url", {road = road_struct, url = road})
end

-- TODO: remove this function.
function place_signs(self)
	local index = {}
	index[1] = 13
	index[2] = 9
	local position = vmath.vector3(c.colAndRowToPos(index).x, c.colAndRowToPos(index).y, 0.6)
	local sign = factory.create("/signs#factory", position)
	c.setSign(position, sign)
end

function build_roads(self)
	r.initRoads()
	for _, road in ipairs(r.roads) do
		msg.post("/navigator", "add_road", {from = road.start, to = road.finish})
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	math.randomseed(os.time())
	c.initCoord()
	s.initShops()
	h.initHomes()
	place_signs(self)
	-- Init navigator.
	for i = 1, c.columns * c.rows do
		msg.post("/navigator", "add_cell", {cell = i})
	end
	build_roads(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("add_road") then
		draw_road(self, message.road)
	elseif message_id == hash("delete_button") then
		delete_roads = not delete_roads
	elseif message_id == hash("start") then
		start_game()
	elseif message_id == hash('place_sign') then
		
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		local tile_index = sign_table.tile_index(action)
		if tile_index ~= 0 then
			msg.post('/GUI#game_options', 'signs_panel', {index = tile_index, pos = vmath.vector3(action.x, action.y, 1)})
		end
		local position = vmath.vector3(action.x, action.y, 0)
	elseif action_id == hash("touch") and action.pressed then
		local position = vmath.vector3(action.x, action.y, 0)
		delete_road(self, position)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function start_game()
	timer.delay(game_time, false, end_game)
end

end_game = function()
	msg.post("/gui", "end")
end
