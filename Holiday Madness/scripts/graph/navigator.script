-- Navigator stores information about graph and traffic
-- and plots routes for cars.

local c = require "scripts.coordinates"
local s = require "scripts.shop"
local sgn = require "scripts.signs"
local day_cycle = require "scripts.day_cycle"
local h = require "scripts.graph.heap"

-- Graph

-- Edge of the graph.
Road = {}

-- Road object creator
-- TO_STAY in the newer version

function Road:new(from, to, width, length)

	local obj= {}
	obj.from = from
	obj.to = to
	obj.width = width
	obj.length = length
	obj.cars = 0 -- All cars on the road.
	obj.cars_entered = 0 -- Cars that just entered the road.

	-- Make object.
	setmetatable(obj, self)
	self.__index = self; return obj
end

-- Calculates how much time will a car spend on a given road.

function time_on_road(road)
	return road.length * math.max(math.pow(road.cars + 1, 2) / road.width, 1)
end

local roads = {}
-- Cars urls, for telling cars that they can speed up if possible, works as a stack.
local cars = {}
local cells = {}
local signs = {}
local cell_count = 0


-- Functions.

function gcd(a, b)
	if b < 0 then
		b = -b
	end
	if a < 0 then
		a = -a
	end
	if b == 0 then
		return math.max(a, 1)
	end
	return gcd(b, a%b)
end

-- Boolean function, returns true if the road can be built.
-- NOT_NEEDED in the newer version, user cannot add roads.

function can_add_road(cell1, cell2)
	if roads[cell1.number][cell2.number] ~= nil then
		return false
		
	elseif cell1.number == cell2.number then
		return false
		
	elseif not c.isEmptyIndex(cell1.number) and c.road_built[cell1.number]
	or not c.isEmptyIndex(cell2.number) and c.road_built[cell2.number] then
		return false
	end

	local x1 = cell1.position.x
	local x2 = cell2.position.x
	local y1 = cell1.position.y
	local y2 = cell2.position.y
	
	if roads[c.index(vmath.vector3(x1, y2, 0))][c.index(vmath.vector3(x2, y1, 0))] ~= nil
	and not (x2 == x1) and not(y2 == y1) then
		return false
	end
	return true
end

-- Adds a road to the graph using cells. Returns a new road.

function add_road(cell1, cell2)
	width = math.min(c.getWidth(cell1.number), c.getWidth(cell2.number))
	length = vmath.length(cell2.position - cell1.position)
	roads[cell1.number][cell2.number] = Road:new(cell1, cell2, width, length)
	roads[cell2.number][cell1.number] = Road:new(cell2, cell1, width, length)
	-- i dont understand yet
	cars[cell2.number][cell1.number] = {}
	cars[cell1.number][cell2.number] = {}
	
	c.road_built[cell1.number] = true
	c.road_built[cell2.number] = true
	return roads[cell1.number][cell2.number]
end

-- Builds a road from start to finish,
-- then send an add_road msg to the sender if the road is made(?)

function plan_roads(start, finish, sender)
	-- Center coordinates.
	start = c.colAndRowToPos(c.colAndRow(start))
	finish = c.colAndRowToPos(c.colAndRow(finish))
	
	local first_cell = {number = c.index(start), position = start}
	local last_cell = {number = c.index(finish), position = finish}

	add_cell(c.index(start))
	add_cell(c.index(finish))
	
	if can_add_road(first_cell, last_cell) then
		local built_road = add_road(first_cell, last_cell)
		msg.post(sender, "add_road", {road = built_road })
	end
end


function remove_road(start, finish)
	
	start = c.colAndRowToPos(c.colAndRow(start))
	finish = c.colAndRowToPos(c.colAndRow(finish))
	
	local first_cell = {number = c.index(start), position = start}
	local last_cell = {number = c.index(finish), position = finish}
	-- Delete road from cells.
	c.road_built[first_cell.number] = false
	c.road_built[last_cell.number] = false
	-- Delete road go.
	if roads[first_cell.number][last_cell.number] ~= nil then
		if roads[first_cell.number][last_cell.number].url ~= nil then
			go.delete(roads[first_cell.number][last_cell.number].url)
		end
	end
	
	roads[first_cell.number][last_cell.number] = nil
	roads[last_cell.number][first_cell.number] = nil
end

-- Adds cell.

function add_cell(cell)
	local exists = false
	for e, c in pairs(cells) do
		if c == cell then
			exists = true
		end
	end
	if not exists then
		roads[cell] = {}
		cars[cell] = {}
		signs[cell] = {}
		cells[cell_count] = cell
		cell_count = cell_count + 1
	end
end

-- Increment cars counter on the road.

function add_car_riding(car, from, to)
	table.insert(cars[from][to], car)
	roads[from][to].cars = roads[from][to].cars + 1
	roads[from][to].cars_entered = roads[from][to].cars_entered + 1
end

function road_can_be_entered(car, from, to)
	roads[from][to].cars_entered = roads[from][to].cars_entered - 1
end

-- Decrement cars counter on the road.

function remove_car(car, from, to)
	-- First car is removed, because it is added first and finish riding first. Why?????
	table.remove(cars[from][to], 1)
	roads[from][to].cars = roads[from][to].cars - 1
	for k, other_car in pairs(cars[from][to]) do
		go.set(other_car, "CarsInFront", go.get(other_car, "CarsInFront") - 1)
		msg.post(other_car, "speed_up", {road = roads[from][to]})
	end
end

-- Vertex of the graph, which contains cell number and direction.
function vertex(cell_number, direction)
	return tostring(cell_number) .. "," .. direction
end

function get_road_direction(road)
	if (road.to.position.x > road.from.position.x) then
		return "right"
	elseif (road.to.position.x < road.from.position.x) then
		return "left"
	elseif (road.to.position.y > road.from.position.y) then
		return "up"
	else
		return "down"
	end
end

comparator = function(a, b)
	return a.dist < b.dist
end

-- Plot route and return first road of it.
function get_next_road(start, finish, color, direction)
	directions = {"up", "left", "down", "right"}
	d = {}
	p = {}
	used = {}
	for ind = 1, cell_count do
		for e, dir in pairs(directions) do
			local i = cells[ind - 1]
			d[vertex(i, dir)] = math.huge
			used[vertex(i, dir)] = false
			p[vertex(i, dir)] = nil
		end
	end
	d[vertex(start, direction)] = 0
	local heap = h.new(comparator)
	heap:Insert({dist = d[vertex(start, direction)], v = start, dir = direction})
	for i = 1, cell_count * 4 do
		v = nil
		v_dir = nil
		if heap:Size() > 0 then
			min_vertex = heap:Pop()
			v = min_vertex.v
			v_dir = min_vertex.dir
		end
		if (not (v == nil)) and (not used[vertex(v, v_dir)]) then
		
			if (finish == v) or (finish == nil and c.isShop(v)) or  v == nil or d[vertex(v, v_dir)] == math.huge then
				break
			end

			used[vertex(v, v_dir)] = true
			-- Check roads.
			for e, road in pairs(roads[v]) do
				local sign = c.getSign(road.to.position)
				local from_sign = c.getSign(road.from.position)
				local url = msg.url(nil, sign, 'road_sign')
				local from_url = msg.url(nil, from_sign, 'road_sign')
				dir = get_road_direction(road)
				if (sign == nil or not (go.get(url, "Type") == 1 and color == 1 or go.get(url, "Type") == 2 and color == 0))
				and (from_sign == nil or sgn.can_turn(v_dir, dir, go.get(from_url, "Type"), color)) then
					if d[vertex(v, v_dir)] + time_on_road(road) < d[vertex(e, dir)] then
						d[vertex(e, dir)] = d[vertex(v, v_dir)] + time_on_road(road)
						heap:Insert({dist = vertex(e, dir), v = e, dir = dir})
						p[vertex(e, dir)] = {v = v, dir = v_dir}
					end
				end
			end
			
		end
	end
	return get_next_road_restore_path(start, finish, color, p, d)
end

-- Restore next road from calculated distances and paths.
function get_next_road_restore_path(start, finish, color, p, d)
	directions = {"up", "left", "down", "right"}
	-- Find closest shop if there is no finish specified.
	local next_dir = "up"
	if finish == nil then
		for i = 1, #(s.shops) do
			for e, dir in pairs(directions) do
				local script_url = msg.url(s.shops[i].url)
				script_url.fragment = "shop"
				if go.get(script_url, "Visitors") < 10
				and s.shops[i].color == color 
				and (finish == nil or d[vertex(c.index(s.shops[i].pos), dir)] < d[vertex(finish, next_dir)]) then
					finish = c.index(s.shops[i].pos)
					next_dir = dir
				end
			end
		end
	else
		for e, dir in pairs(directions) do
			if d[vertex(finish, dir)] < d[vertex(finish, next_dir)] then
				next_dir = dir
			end
		end
	end

	-- Trace back the path.
	local next_cell = finish

	while next_cell ~= nil and p[vertex(next_cell, next_dir)] ~= nil and p[vertex(next_cell, next_dir)].v ~= start do
		next_vertex = p[vertex(next_cell, next_dir)]
		next_cell = next_vertex.v
		next_dir = next_vertex.dir
	end
	
	if (start == finish) then
		return Road:new(start, finish, 1, 0)
	elseif (next_cell == nil) then
		return nil
	elseif roads[start] == nil then
		return nil
	else
		return roads[start][next_cell]
	end
end

function is_intersection(index)
	local count = 0
	for _ in pairs(roads[index]) do 
		count = count + 1 
	end
	return count > 2
end

function is_busy_vertical(index)
	local count = 0
	for e, road in pairs(roads[index]) do 
		if road.from.position.x == road.to.position.x then
			count = count + road.cars_entered
		end
	end
	return count > 0
end

function is_busy_horizontal(index)
	local count = 0
	for e, road in pairs(roads[index]) do 
		if road.from.position.y == road.to.position.y then
			count = count + road.cars_entered
		end
	end
	return count > 0
end

function clear_cars()
	for i = 1, cell_count do
		for e, road in pairs(roads[cells[i - 1]]) do
			roads[cells[i - 1]][e].cars = 0
			roads[cells[i - 1]][e].cars_entered = 0
			cars[cells[i - 1]][e] = {}
		end
	end
end

function set_sign_navigator(type, position, url)
	c.setSign(position, url)
end

function delete_sign(type, position)
	c.delSign(position, type)
end

-- Object lifecycle.
-- We can add init(self), final(self), update(self, dt),
-- on_input(self, action_id, action), function on_reload(self)
-- functions later, if needed.

-- This is a msg catcher.

function on_message(self, message_id, message, sender)
	
	if message_id == hash("road_is_finished") then
		remove_car(sender, message.from, message.to)
	elseif message_id == hash("intersection") then
		if message.road.to.position.y == message.road.from.position.y then
			if is_busy_vertical(message.road.to.number) then
				msg.post(sender, "wait_on_intersection", {road = message.road})
			else
				local sign = c.getSign(message.road.to.position)
				local url = msg.url(nil, sign, 'road_sign')
				if sign == nil or go.get(url, "Type") ~= 0 then
					msg.post(sender, "enter_intersection", {road = message.road})
				else
					msg.post(sign, "does_sign_allows", {car = sender, road = message.road})
				end
			end
		else
			if is_busy_horizontal(message.road.to.number) then
				msg.post(sender, "wait_on_intersection", {road = message.road})
			else
				local sign = c.getSign(message.road.to.position)
				local url = msg.url(nil, sign, 'road_sign')
				if sign == nil or go.get(url, "Type") ~= 0 then
					msg.post(sender, "enter_intersection", {road = message.road})
				else
					msg.post(sign, "does_sign_allows", {car = sender, road = message.road})
				end
			end
		end
	elseif message_id == hash("let_car_go") then
		msg.post(message.car, "enter_intersection", {road = message.road})
	elseif message_id == hash("stop_car") then
		msg.post(message.car, "wait_on_intersection", {road = message.road})
	elseif message_id == hash("where_next") then
		next_road = get_next_road(message.from, message.to, message.color, message.direction)
		if next_road == nil then
			msg.post(sender, "wait")
		elseif next_road.from == next_road.to and message.to ~= nil then
			msg.post(sender, "home")
		elseif next_road.from == next_road.to then
			msg.post(sender, "done")
		else
			add_car_riding(sender, next_road.from.number, next_road.to.number)
			go.set(sender, "CarsInFront", next_road.cars - 1)
			msg.post(sender, "go_to", { road = next_road, from_intersection = is_intersection(next_road.from.number), to_intersection = is_intersection(next_road.to.number) })
		end
	elseif message_id == hash("road_can_be_entered") then
		road_can_be_entered(sender, message.from.number, message.to.number)
	
	elseif message_id == hash("add_cell") then
		add_cell(message.cell)
		
	elseif message_id == hash("add_road") then
		plan_roads(message.from, message.to, sender)
		
	elseif message_id == hash("delete_road") then
		remove_road(message.from, message.to)

	elseif message_id == hash("clear_cars") then
		clear_cars()
		
	elseif message_id == hash("add_road_url") then
		roads[message.road.from.number][message.road.to.number].url = message.url
		roads[message.road.to.number][message.road.from.number].url = message.url
	elseif message_id == hash("set_sign") then
		set_sign_navigator(message.type, message.pos, message.url)
	elseif message_id == hash("del_sign") then
		delete_sign(message.type, message.pos)
	end
end
