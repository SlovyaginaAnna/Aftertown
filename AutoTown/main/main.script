local c = require "main/modules/coordinates"

-- Position of last touch.
local last_touch = nil

function gcd(a, b)
	if b < 0 then
		b = -b
	end
	if a < 0 then
		a = -a
	end
	if b == 0 then
		return a
	end
	return gcd(b, a%b)
end

function build_road(self, position)
	if last_touch == nil then
		last_touch = c.getCenter(position)
		go.set_position(vmath.vector3(last_touch.x, last_touch.y, 0), "/selected_cell")
	else
		position = c.getCenter(position)
		local cell1 = {number = c.getCellNumber(last_touch), position = last_touch}
		-- TODO: remove magic numbers.
		local steps = gcd((position.x - last_touch.x) / 96, (position.y - last_touch.y) / 96)
		local step = (position - last_touch) / steps
		local next_pos = last_touch + step
		for i = 1, steps do
			local cell2 = {number = c.getCellNumber(next_pos), position = next_pos}
			-- Add road to navigator.
			msg.post("/navigator", "add_road", { from = cell1, to = cell2, width = 1, length = vmath.length(next_pos - last_touch) })
			cell1 = {number = c.getCellNumber(next_pos), position = next_pos}
			next_pos = next_pos + step
		end
		go.set_position(vmath.vector3(last_touch.x, last_touch.y, 100), "/selected_cell")
		last_touch = nil
	end
end

function draw_road(self, road)
	local start = road.from.position
	local finish = road.to.position
	
	local road = factory.create("/roads#factory", start)
	go.set(road, "scale.x", vmath.length(finish - start)/1080)
	go.set(road, "scale.y", 1/80)

	local direction = (finish - start) / 2
	local rotation = vmath.quat_rotation_z(math.atan2(direction.y, direction.x))
	go.set_rotation(rotation, road)
	go.set_position(start + direction, road)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	-- Init coordinates and navigator.
	c.initCoord()
	for i = 1, #(c.coord) do
		msg.post("/navigator", "add_cell", {cell = i})
	end
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("add_road") then
		draw_road(self, message.road)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		local position = vmath.vector3(action.x, action.y, 0)
		build_road(self, position)
	end
end
